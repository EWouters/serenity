From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Andreas Kling <awesomekling@gmail.com>
Date: Sat, 14 Sep 2019 10:02:38 +0200
Subject: [PATCH] Add SerenityOS platform support

Add a menubar and allow switching in/out of fullscreen mode
Support the ALT key for strafing :^)

Co-Authored-By: special-squad <66980659+special-squad@users.noreply.github.com>
Co-Authored-By: Dan MacDonald <allcoms@gmail.com>
Co-Authored-By: thatdutchguy <209150+thatdutchguy@users.noreply.github.com>
Co-Authored-By: Gunnar Beutner <gunnar@beutner.name>
Co-Authored-By: Tim Schumacher <timschumi@gmx.de>
Co-Authored-By: EWouters <6179932+EWouters@users.noreply.github.com>
---
 doomgeneric/Makefile                 |  31 ++--
 doomgeneric/doom.png                 | Bin 0 -> 760 bytes
 doomgeneric/doomgeneric.h            |  11 +-
 doomgeneric/doomgeneric_serenity.cpp | 215 +++++++++++++++++++++++++++
 doomgeneric/hu_stuff.c               |   2 +-
 doomgeneric/{i_main.c => i_main.cpp} |  21 ++-
 doomgeneric/wi_stuff.c               |   2 +-
 7 files changed, 258 insertions(+), 24 deletions(-)
 create mode 100644 doomgeneric/doom.png
 create mode 100644 doomgeneric/doomgeneric_serenity.cpp
 rename doomgeneric/{i_main.c => i_main.cpp} (82%)

diff --git a/doomgeneric/Makefile b/doomgeneric/Makefile
index f1d8df5..7511e04 100644
--- a/doomgeneric/Makefile
+++ b/doomgeneric/Makefile
@@ -5,24 +5,19 @@
 # $Log:$
 #
 
-ifeq ($(V),1)
-	VB=''
-else
-	VB=@
-endif
-
-
-CC=gcc  # gcc or g++
+CC?=i686-pc-serenity-gcc
+CXX?=i686-pc-serenity-g++
 CFLAGS+=-ggdb3 -Os
+CXXFLAGS=$(CFLAGS) -std=c++2a -fno-exceptions
 LDFLAGS+=-Wl,--gc-sections
 CFLAGS+=-ggdb3 -Wall -DNORMALUNIX -DLINUX -DSNDSERV # -DUSEASM
-LIBS+=-lm -lc -lX11
+LIBS+=-lm -lc -lgui -lipc -lgfx -lcore -lregex
 
 # subdirectory for objects
 OBJDIR=build
-OUTPUT=doomgeneric
+OUTPUT=doom
 
-SRC_DOOM = i_main.o dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o doomgeneric.o doomgeneric_xlib.o
+SRC_DOOM = i_main.o dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o doomgeneric.o doomgeneric_serenity.o
 OBJS += $(addprefix $(OBJDIR)/, $(SRC_DOOM))
 
 all:	 $(OUTPUT)
@@ -35,7 +30,7 @@ clean:
 
 $(OUTPUT):	$(OBJS)
 	@echo [Linking $@]
-	$(VB)$(CC) $(CFLAGS) $(LDFLAGS) $(OBJS) \
+	$(VB)$(CXX) $(CXXFLAGS) $(LDFLAGS) $(OBJS) \
 	-o $(OUTPUT) $(LIBS) -Wl,-Map,$(OUTPUT).map
 	@echo [Size]
 	-$(CROSS_COMPILE)size $(OUTPUT)
@@ -47,8 +42,18 @@ $(OBJDIR):
 
 $(OBJDIR)/%.o:	%.c
 	@echo [Compiling $<]
-	$(VB)$(CC) $(CFLAGS) -c $< -o $@
+	$(PRE_CXX) $(VB)$(CC) $(CFLAGS) -c $< -o $@
+
+$(OBJDIR)/%.o:	%.cpp
+	@echo [Compiling $<]
+	$(PRE_CXX) $(VB)$(CXX) $(CXXFLAGS) -c $< -o $@
 
 print:
 	@echo OBJS: $(OBJS)
 
+install:
+	mkdir -p $(DESTDIR)/bin
+	cp $(OUTPUT) $(DESTDIR)/bin
+	mkdir -p $(DESTDIR)/res/icons/16x16
+	cp doom.png $(DESTDIR)/res/icons/16x16/
+
diff --git a/doomgeneric/doom.png b/doomgeneric/doom.png
new file mode 100644
index 0000000000000000000000000000000000000000..afa484b15f76b1719daead74651aeb7730d97941
GIT binary patch
literal 760
zcmV<U0tfwxP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV0008NNkl<ZILmd@
zT}Tyn7zXg)IeMI0XS1bjWr4vg%vNl;%&@?*s8L!(lCTSJLh!=7O&AP`*wq{-7`v#8
zeLyxGqe$9^8f+kQXj@~pphnZp&onPq=~9o!^WQ}lL+H7Bd3Zmb2c8$y)zz)HjHafh
ze?0|_jg3t!xhS-^w@<XRv;-(DEX;k{g52EPkD$4^IXvbv9~T1y15Tel9Xh}KP#d8X
zam?W%ZsC*OPOYu2p{J)O{dg{d7#5+vzCP5}*7~caMoBtt4k@g~Xl13Ph6df;-P+pP
zBFMlJsIIQgPb3oI5}{$wp70xCknjQFeZp<R&x8{d72z5okw}F9EATZTwS4W@>}<vJ
z^L8!Ej^ZW!go%Oz+oq?*9t|#5la&eIVi)dj-YlMxv~hd6Z~FUvm3NPHaO9t7Z7(ac
zG&*D`8ujwjl=er~MSf&tn2lFrF>f6`>V?8W*RNicm!EIs?zp8?N@4yw3lASE-n!MD
z@p0`P9gbi<S27|bb{syeEtch(n>Q^!cp!qToE+tQt8Clxs;SXYnHd?TCnt>!4?CL~
zb8vRnC1#=(nC<8=J3C|M*fHO2*<x;fUT#i~NHi+GW{r3}ZencA;DG~vudH<R?vxwY
zjm#5d&5%sZ%{hO2(EWRNT}TglPO;K6XCzZ8e^gajcs}LtFV3kxSfe_fR)RcUiNF;?
z9DNu;-l=!BwCqz<w8`q#Z@77@)!WA}$Uc8w411OX@H&wQG)5x5Zyq|dd-C#S`?9ip
zmQ31&>HYiNU%S?Zix<t#&pRHC`hMq5C4GH9rSB{inNSeI4`b}!i$9Y|uVDe(ySk)s
z2LZpN)5`k#TrV#V>-zh<o;=ej-s@Sl$~kl{TiHyi_fg0c;~K{BIXa4poaE$_B(B6e
qqz1{@z>RE5hlspL*T)=K+4~>b9}CGHBbs9X0000<MNUMnLSTZwv2Sw#

literal 0
HcmV?d00001

diff --git a/doomgeneric/doomgeneric.h b/doomgeneric/doomgeneric.h
index 2588710..468fbbf 100644
--- a/doomgeneric/doomgeneric.h
+++ b/doomgeneric/doomgeneric.h
@@ -3,9 +3,12 @@
 
 #include <stdint.h>
 
-#define DOOMGENERIC_RESX 640
-#define DOOMGENERIC_RESY 400
+#define DOOMGENERIC_RESX 320
+#define DOOMGENERIC_RESY 200
 
+#ifdef __cplusplus
+extern "C" {
+#endif
 
 extern uint32_t* DG_ScreenBuffer;
 
@@ -17,4 +20,8 @@ uint32_t DG_GetTicksMs();
 int DG_GetKey(int* pressed, unsigned char* key);
 void DG_SetWindowTitle(const char * title);
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif //DOOM_GENERIC
diff --git a/doomgeneric/doomgeneric_serenity.cpp b/doomgeneric/doomgeneric_serenity.cpp
new file mode 100644
index 0000000..4e287ca
--- /dev/null
+++ b/doomgeneric/doomgeneric_serenity.cpp
@@ -0,0 +1,215 @@
+#include "doomkeys.h"
+#include "doomgeneric.h"
+
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <ctype.h>
+#include <sys/time.h>
+
+#include <LibGfx/Bitmap.h>
+#include <LibGUI/Window.h>
+#include <LibGUI/Widget.h>
+#include <LibGUI/Event.h>
+#include <LibGUI/Painter.h>
+#include <LibCore/EventLoop.h>
+#include <LibCore/Timer.h>
+#include <LibGUI/Menu.h>
+#include <LibGUI/Menubar.h>
+
+static RefPtr<GUI::Window> g_window;
+static RefPtr<Gfx::Bitmap> g_bitmap;
+
+#define KEYQUEUE_SIZE 16
+
+static unsigned short s_KeyQueue[KEYQUEUE_SIZE];
+static unsigned int s_KeyQueueWriteIndex = 0;
+static unsigned int s_KeyQueueReadIndex = 0;
+
+extern "C" void DG_SetFullscreen(bool fullscreen);
+
+static unsigned char convertToDoomKey(const GUI::KeyEvent& event)
+{
+    unsigned char key = 0;
+    switch (event.key()) {
+    case Key_Return:
+        key = KEY_ENTER;
+        break;
+    case Key_Escape:
+        key = KEY_ESCAPE;
+        break;
+    case Key_Left:
+        key = KEY_LEFTARROW;
+        break;
+    case Key_Right:
+        key = KEY_RIGHTARROW;
+        break;
+    case Key_Up:
+        key = KEY_UPARROW;
+        break;
+    case Key_Down:
+        key = KEY_DOWNARROW;
+        break;
+    case Key_Control:
+        key = KEY_FIRE;
+        break;
+    case Key_Space:
+        key = KEY_USE;
+        break;
+    case Key_LeftShift:
+    case Key_RightShift:
+        key = KEY_RSHIFT;
+        break;
+    case Key_Alt:
+        key = KEY_RALT;
+        break;
+    default:
+        if (!event.text().is_empty())
+            key = tolower(event.text()[0]);
+        break;
+    }
+
+    return key;
+}
+
+static void addKeyToQueue(const GUI::KeyEvent& event)
+{
+    bool pressed = event.type() == GUI::Event::KeyDown;
+    unsigned char key = convertToDoomKey(event);
+
+    unsigned short keyData = (pressed << 8) | key;
+
+    s_KeyQueue[s_KeyQueueWriteIndex] = keyData;
+    s_KeyQueueWriteIndex++;
+    s_KeyQueueWriteIndex %= KEYQUEUE_SIZE;
+}
+
+class DoomWidget final : public GUI::Widget {
+    C_OBJECT(DoomWidget)
+public:
+    DoomWidget() {}
+
+    virtual void keydown_event(GUI::KeyEvent&) override;
+    virtual void keyup_event(GUI::KeyEvent&) override;
+    virtual void paint_event(GUI::PaintEvent&) override;
+};
+
+void DoomWidget::keydown_event(GUI::KeyEvent& event)
+{
+    addKeyToQueue(event);
+    GUI::Widget::keydown_event(event);
+}
+
+void DoomWidget::keyup_event(GUI::KeyEvent& event)
+{
+    addKeyToQueue(event);
+    GUI::Widget::keyup_event(event);
+}
+
+void DoomWidget::paint_event(GUI::PaintEvent& event)
+{
+    GUI::Painter painter(*this);
+    painter.add_clip_rect(event.rect());
+
+    painter.draw_scaled_bitmap(rect(), *g_bitmap, g_bitmap->rect());
+}
+
+static RefPtr<DoomWidget> g_doom_widget;
+
+extern "C" void DG_Init()
+{
+    memset(s_KeyQueue, 0, KEYQUEUE_SIZE * sizeof(unsigned short));
+
+    // window creation
+
+    g_bitmap = Gfx::Bitmap::try_create_wrapper(Gfx::BitmapFormat::Indexed8, Gfx::IntSize(DOOMGENERIC_RESX, DOOMGENERIC_RESY), 1, DOOMGENERIC_RESX, DG_ScreenBuffer).release_value_but_fixme_should_propagate_errors();
+
+    g_window = GUI::Window::construct();
+    g_window->set_double_buffering_enabled(false);
+    g_window->set_rect(100, 100, DOOMGENERIC_RESX * 2, DOOMGENERIC_RESY * 2);
+    auto app_icon = Gfx::Bitmap::try_load_from_file("/res/icons/16x16/doom.png").release_value_but_fixme_should_propagate_errors();
+    g_window->set_icon(app_icon);
+
+    auto& doom_menu = g_window->add_menu("DOOM");
+    doom_menu.add_action(GUI::CommonActions::make_quit_action([](auto&) {
+        exit(0);
+    }));
+
+    auto& view_menu = g_window->add_menu("View");
+    auto fullscreen_action = GUI::CommonActions::make_fullscreen_action([&](auto& action) {
+        action.set_checked(!action.is_checked());
+        DG_SetFullscreen(action.is_checked());
+    });
+    fullscreen_action->set_checkable(true);
+    view_menu.add_action(fullscreen_action);
+
+    g_doom_widget = DoomWidget::construct();
+    g_window->set_main_widget(g_doom_widget);
+
+    new CTimer(33, [] {
+        g_doom_widget->update();
+    });
+
+    g_window->show();
+}
+
+
+extern "C" void DG_DrawFrame()
+{
+    Core::EventLoop::current().pump(Core::EventLoop::WaitMode::PollForEvents);
+}
+
+extern "C" void DG_SleepMs(uint32_t ms)
+{
+    usleep (ms * 1000);
+}
+
+extern "C" uint32_t DG_GetTicksMs()
+{
+    struct timeval  tp;
+    struct timezone tzp;
+
+    gettimeofday(&tp, &tzp);
+
+    return (tp.tv_sec * 1000) + (tp.tv_usec / 1000); /* return milliseconds */
+}
+
+extern "C" int DG_GetKey(int* pressed, unsigned char* doomKey)
+{
+    if (s_KeyQueueReadIndex == s_KeyQueueWriteIndex)
+    {
+        //key queue is empty
+
+        return 0;
+    }
+    else
+    {
+        unsigned short keyData = s_KeyQueue[s_KeyQueueReadIndex];
+        s_KeyQueueReadIndex++;
+        s_KeyQueueReadIndex %= KEYQUEUE_SIZE;
+
+        *pressed = keyData >> 8;
+        *doomKey = keyData & 0xFF;
+
+        return 1;
+    }
+}
+
+extern "C" void DG_SetWindowTitle(const char * title)
+{
+    if (g_window)
+        g_window->set_title(title);
+}
+
+extern "C" void DG_SetPalette(const struct color* colors)
+{
+    for (int i = 0; i < 256; ++i) {
+        auto& c = colors[i];
+        g_bitmap->set_palette_color(i, Color(c.r, c.g, c.b));
+    }
+}
+
+extern "C" void DG_SetFullscreen(bool fullscreen)
+{
+    g_window->set_fullscreen(fullscreen);
+}
diff --git a/doomgeneric/hu_stuff.c b/doomgeneric/hu_stuff.c
index b63cac7..e61a243 100644
--- a/doomgeneric/hu_stuff.c
+++ b/doomgeneric/hu_stuff.c
@@ -294,7 +294,7 @@ void HU_Init(void)
     j = HU_FONTSTART;
     for (i=0;i<HU_FONTSIZE;i++)
     {
-	DEH_snprintf(buffer, 9, "STCFN%.3d", j++);
+	DEH_snprintf(buffer, 9, "STCFN%03d", j++);
 	hu_font[i] = (patch_t *) W_CacheLumpName(buffer, PU_STATIC);
     }
 
diff --git a/doomgeneric/i_main.c b/doomgeneric/i_main.cpp
similarity index 82%
rename from doomgeneric/i_main.c
rename to doomgeneric/i_main.cpp
index b192227..69f1970 100644
--- a/doomgeneric/i_main.c
+++ b/doomgeneric/i_main.cpp
@@ -18,10 +18,15 @@
 
 //#include "config.h"
 
+#include <LibGUI/Action.h>
+#include <LibGUI/Application.h>
+
 #include <stdio.h>
 
+extern "C" {
 //#include "doomtype.h"
 //#include "i_system.h"
+
 #include "m_argv.h"
 
 //
@@ -30,15 +35,18 @@
 // calls all startup code, parses command line options.
 //
 
-void D_DoomMain (void);
+void D_DoomMain(void);
 
 void M_FindResponseFile(void);
 
 void dg_Create();
+void DG_SetFullscreen(bool);
+}
 
-
-int main(int argc, char **argv)
+int main(int argc, char** argv)
 {
+    auto app = GUI::Application::construct(argc, argv);
+
     // save arguments
 
     myargc = argc;
@@ -48,11 +56,10 @@ int main(int argc, char **argv)
 
     // start doom
     printf("Starting D_DoomMain\r\n");
-    
-	dg_Create();
 
-	D_DoomMain ();
+    dg_Create();
+
+    D_DoomMain();
 
     return 0;
 }
-
diff --git a/doomgeneric/wi_stuff.c b/doomgeneric/wi_stuff.c
index ddb9a66..1b19f6f 100644
--- a/doomgeneric/wi_stuff.c
+++ b/doomgeneric/wi_stuff.c
@@ -1593,7 +1593,7 @@ static void WI_loadUnloadData(load_callback_t callback)
 		    if (wbs->epsd != 1 || j != 8)
 		    {
 			// animations
-			DEH_snprintf(name, 9, "WIA%d%.2d%.2d", wbs->epsd, j, i);
+			DEH_snprintf(name, 9, "WIA%d%02d%02d", wbs->epsd, j, i);
                         callback(name, &a->p[i]);
 		    }
 		    else
